generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String?    @unique
  password      String?
  phone         String?    @unique
  google_id     String?    @unique
  github_id     String?    @unique
  avatar        String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  SMSToken      SMSToken[]
  product_list  Product[]
  post          Post[]
  comment       Comment[]
  like          Like[]
  chatRoom_list ChatRoom[]
  message_list  Message[]
  review_list   Review[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  phone      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
}

model Product {
  id            Int        @id @default(autoincrement())
  title         String
  price         Float
  description   String
  photo         String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  chatroom_list ChatRoom[]
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  views        Int       @default(0)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      Int
  comment_list Comment[]
  like_list    Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String // 실제 댓글
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id    Int
  post_id    Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade) // 좋아요를 누른 유저
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade) // 좋아요를 누른 게시글
  user_id    Int
  post_id    Int

  @@id(name: "id", [user_id, post_id])
}

model ChatRoom {
  id String @id @default(cuid())

  user_list  User[]
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  message_list Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room        ChatRoom @relation(fields: [chatRoom_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
  chatRoom_id String
  user_id     Int
}

model Review {
  id        Int    @id @default(autoincrement())
  writer    User   @relation(fields: [writer_id], references: [id])
  writer_id Int
  payload   String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
